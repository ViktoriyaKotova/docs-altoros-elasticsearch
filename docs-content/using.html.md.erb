---
title: Using Altoros ElasticSearch Service for PCF
owner: Partners
---

This topic describes how to use ElasticSearch Service for Pivotal Cloud Foundry (PCF) after it has been installed.

##<a id='using'></a> Use ElasticSearch Service for PCF with an App

To use ElasticSearch Service for PCF with an app, follow the procedures in this section to create a service instance and bind the service instance
to your app. For more information about managing service instances, see <a href="https://docs.pivotal.io/pivotalcf/devguide/services/managing-services.html" target="_blank">Managing Service Instances with the cf CLI</a>.

### <a id="list"></a>View the Service

After the tile has been installed, `a-elasticsearch` and its service
plans appear in your Marketplace. Run `cf marketplace` to
see the service listing.

<pre class="terminal">
$ cf marketplace
Getting services from marketplace in org admin / space dev as admin...
OK

service           plans     description
a-elasticsearch   default   Shared Elasticsearch Cluster
</pre>

### <a id="create"></a> Create a Service Instance

Use `cf create-service` to provision a keyspace.

<pre class="terminal">
$ cf create-service a-elasticsearch default elasticsearch
</pre>

Check the creation status using `cf services`. This displays a list of all your service instances. To check the status of a specific service instance, run `cf service NAME-OF-YOUR-SERVICE`.

### <a id="bind"></a>Bind the Service Instance to an App

After you have created your keyspace, run
`cf bind-service` to bind the service to your app.

<pre class="terminal">
$ cf bind-service sample-app elasticsearch
</pre>

### <a id="restart"></a>Restage or Restart Your App

To enable your app to access the service instance, run `cf restage` or `cf restart` to restage or restart your app.

### <a id="obtain"></a>Obtain Service Instance Access Credentials

After you have bound your service instance to your app, you can find the credentials of your ElasticSearch
user in the environment variables of the app.

Run `cf env APP-NAME` to display environment variables. The credentials are listed under
the <a href="https://docs.pivotal.io/pivotalcf/devguide/deploy-apps/environment-variable.html#VCAP-SERVICES" target="_blank">VCAP_SERVICES</a> key.

<pre class="terminal">
$ cf env sample-app
Getting env variables for app sample-app in org system / space test as admin...
OK

System-Provided:
{
 "VCAP_SERVICES": {
  "a-elasticsearch": [
   {
    "credentials": {
     "index": "ajwwhthctcua",
     "nodes": [
      "192.168.111.53",
      "192.168.111.55",
      "192.168.111.54"
     ],
     "password": "fplsjfbcxoeffr",
     "username": "xhxkqfda"
    },
    "label": "a-elasticsearch",
    "name": "elasticsearch",
    "plan": "default",
    "provider": null,
    "syslog_drain_url": null,
    "tags": [
     "elasticsearch",
     "logs"
    ],
    "volume_mounts": []
   }
  ]
 }
}
...
</pre>

You can use these parameters to connect to ElasticSearch.

##<a id='deleting'></a> Delete an Altoros ElasticSearch for PCF Service Instance

<p class="note warning"><strong>WARNING!</strong> Before deleting a service instance, you must back up the data stored in your keyspace. This operation cannot be undone, and all the data is lost when the service is deleted.</p>

Follow the instructions below to unbind your service instance from all apps and delete it.

### <a id="list2"></a>List Available Services

Run `cf service` to list your available services.

<pre class="terminal">
$ cf services
Getting services in org system / space test as admin...
OK

name            service           plan      bound apps   last operation
elasticsearch   a-elasticsearch   default   sample-app   create succeeded
</pre>

This example shows that `elasticsearch` is bound to the `sample-app` app.

### <a id="unbind"></a>Unbind a Service Instance

Run `cf unbind` to unbind the service from your app:

<pre class="terminal">
$ cf unbind-service sample-app elasticsearch
</pre>

### <a id="delete"></a>Delete a Service Instance

Run `cf delete-service` to delete the service.

<pre class="terminal">
  $ cf delete-service elasticsearch
</pre>

Run the `cf services` command to check the deletion status.